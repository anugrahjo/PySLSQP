# Build, test, and upload to PyPI
name: Publish

on:
  # This allows the workflow to be manually triggered from the GitHub UI.
  workflow_dispatch:
  push:
    # The workflow is triggered if either of the 2 conditions below is satisfied
    # This triggers the workflow on push events to the main branch.
    branches: [ "main" ]
  # To trigger the workflow on push events with matching v*, e.g., v1.0, v20.15.10
    tags: ['v*']  # Push events to matching v*, i.e. v1.0, v20.15.10
  pull_request:
    branches: [ "main" ]

  # # This triggers the workflow whenever a release is published.
  # release:
  #   types:
  #     - published # run only when a release is published, not when it's created or edited.

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # macos-11,12,13 are intel runners, macos-14 is apple silicon, no runners for macos-14 with intel x86-64
        os: [ubuntu-20.04, ubuntu-22.04, macos-11, macos-12, macos-13, macos-14]
        # Uncomment the following line for faster testing of the workflow
        # os: [ubuntu-20.04]
    
    steps:      
      - name: Checkout the repository to the GitHub runner
        uses: actions/checkout@v4

      - name: Setup GNU Fortran
        if: false == contains( matrix.os, 'windows')
        uses: awvwgk/setup-fortran@v1
      
      # - name: reinstall gcc for macos
      #   if: contains(matrix.os, 'macos')
      #   run: | 
      #     brew reinstall gcc

      # # - name: Install rtools (mingw-w64) for Windows
      # #   if: contains(matrix.os, 'windows')
      # #   run: |
      # #     choco install rtools -y --no-progress --force --version=4.0.0.20220206
      # #     echo "c:\rtools40\ucrt64\bin;" >> $env:GITHUB_PATH

      # - name: Install mingw-w64 for Windows
      #   if: contains(matrix.os, 'windows')
      #   uses: msys2/setup-msys2@v2
      #   with:
      #     path-type: inherit
      #     install: |
      #       mingw-w64-x86_64-gcc
      #       mingw-w64-x86_64-gcc-fortran

      # The macos-11 label has been deprecated and will no longer be available after 6/28/2024.
      - name: Build macos-11 wheels
        if: contains( matrix.os, 'macos-11')
        uses: pypa/cibuildwheel@v2.18.1
        env:
          CIBW_ENVIRONMENT_MACOS: MACOSX_DEPLOYMENT_TARGET="11.0"
          # Warning: Setting SYSTEM_VERSION_COMPAT=0 to ensure CPython 3.8 can get correct 
          # macOS version and allow installation of wheels with MACOSX_DEPLOYMENT_TARGET >= 11.0. 
          # See https://github.com/pypa/cibuildwheel/issues/1767 for the details.

      - name: Build macos-12 wheels
        if: contains( matrix.os, 'macos-12')
        uses: pypa/cibuildwheel@v2.18.1
        env:
          CIBW_ENVIRONMENT_MACOS: MACOSX_DEPLOYMENT_TARGET="12.0"
          # Warning: Setting SYSTEM_VERSION_COMPAT=0 to ensure CPython 3.8 can get correct 
          # macOS version and allow installation of wheels with MACOSX_DEPLOYMENT_TARGET >= 11.0. 
          # See https://github.com/pypa/cibuildwheel/issues/1767 for the details.
          # Warning: gcc@13 13.2.0 is already installed and up-to-date. 
          # To reinstall 13.2.0, run: brew reinstall gcc@13

          # # Cross-compiling for apple silicon arm64 on an intel x86_64 runner but cannot be tested
          # # Cross-compile couldn't work because repairing wheels fails on arm64 since we always compile
          # # the Fortran files for the parent architecture (x86_64 here) without the knowledge of the build tools
          # # and just copy the compiled files to the cross-compiled (arm64 here) wheel.
          # # Error msg -> "Required arch arm64 missing from pyslsqp/_slsqp.cpython-38-darwin.so"
          # CIBW_ARCHS_MACOS: "x86_64 universal2 arm64"
          # CIBW_TEST_SKIP: "*-macosx_universal2:arm64 *-macosx_arm64"

          

      - name: Build macos-13 wheels
        if: contains( matrix.os, 'macos-13')
        uses: pypa/cibuildwheel@v2.18.1
        env:
          CIBW_ENVIRONMENT_MACOS: MACOSX_DEPLOYMENT_TARGET="13.0"
          # Warning: Setting SYSTEM_VERSION_COMPAT=0 to ensure CPython 3.8 can get correct 
          # macOS version and allow installation of wheels with MACOSX_DEPLOYMENT_TARGET >= 11.0. 
          # See https://github.com/pypa/cibuildwheel/issues/1767 for the details.
          # Warning: gcc@13 13.2.0 is already installed and up-to-date. 
          # To reinstall 13.2.0, run: brew reinstall gcc@13

          # # Cross-compiling for apple silicon arm64 on an intel x86_64 runner but cannot be tested
          # # Cross-compile couldn't work because repairing wheels fails on arm64 since we always compile
          # # the Fortran files for the parent architecture (x86_64 here) without the knowledge of the build tools
          # # and just copy the compiled files to the cross-compiled (arm64 here) wheel.
          # # Error msg -> "Required arch arm64 missing from pyslsqp/_slsqp.cpython-38-darwin.so"
          # CIBW_ARCHS_MACOS: "x86_64 universal2 arm64"
          # CIBW_TEST_SKIP: "*-_universal2:arm64 *_arm64"

          

      - name: Build macos-14 wheels
        if: contains( matrix.os, 'macos-14')
        uses: pypa/cibuildwheel@v2.18.1
        env:
          CIBW_ENVIRONMENT_MACOS: MACOSX_DEPLOYMENT_TARGET="14.0"
          # Warning: While cibuildwheel can build CPython 3.8 universal2/arm64 wheels, 
          # we cannot test the arm64 part of them, even when running on an Apple Silicon machine. 
          # This is because we use the x86_64 installer of CPython 3.8. 
          # See the discussion in https://github.com/pypa/cibuildwheel/pull/1169 for the details. 
          # To silence this warning: set `CIBW_TEST_SKIP: "cp38-macosx_*:arm64"`
          CIBW_TEST_SKIP: "cp38-macosx_arm64"
          # Warning: gcc@13 13.2.0 is already installed and up-to-date. 
          # To reinstall 13.2.0, run: brew reinstall gcc@13

          # # Cross-compiling for intel x86_64 on an apple silicon arm64 but cannot be tested
          # # Cross-compile couldn't work because repairing wheels fails on x86_64 since we always compile
          # # the Fortran files for the parent architecture (x86_64 here) without the knowledge of the build tools
          # # and just copy the compiled files to the cross-compiled (arm64 here) wheel.
          # # Error msg -> "Required arch x86_64 missing from pyslsqp/_slsqp.cpython-38-darwin.so"
          # CIBW_ARCHS_MACOS: "arm64 universal2 x86_64"
          # # Also skip tests for cross compiled wheels
          # # Note: On an arm64 runner, it is possible to test x86_64 wheels and 
          # # both parts of a universal2 wheel using Rosetta 2 emulation.
          # CIBW_TEST_SKIP: "cp38-macosx_*:arm64 *_universal2:x86_64 *_x86_64"
          

      - name: Build linux and windows wheels
        if: false == contains( matrix.os, 'macos')
        uses: pypa/cibuildwheel@v2.18.1

        # Uncomment the following 2 lines for faster testing of the workflow
        # env:
        #   CIBW_BUILD: "cp38-* cp312-*"

        # env:
        #   CIBW_SOME_OPTION: value
        #   # Disable building for PyPy, 32bit
        #   CIBW_SKIP: pp* *-win32 *-manylinux_i686 *-musllinux*
        #   CIBW_BEFORE_TEST: pip install -r requirements_test.txt
        #   CIBW_TEST_COMMAND: pytest {project}/tests
        # with:
        #   package-dir: .
        #   output-dir: wheelhouse
        #   config-file: "{package}/pyproject.toml"

      - uses: actions/upload-artifact@v4
        with:
          # Name of the artifact to upload.
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          # A file, directory or wildcard pattern that describes what to upload. Required.
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      # - uses: actions/setup-python@v4
      #   with:
      #     python-version: '3.10'

      - name: Build sdist
        # run: pipx run build --sdist
        run: |
          python -m pip install --upgrade pip
          python -m pip install build
          python -m build --sdist --outdir dist/

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-sdist
          path: ./dist/*.tar.gz

  # sdists are not tested by cibuildwheel so we need to test them manually
  # We are only running a limited number of configurations here to save actions minutes
  manual_test_of_sdist:
    name: Manual test of sdist
    needs: [build_sdist]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, macos-13, macos-14]
        python-version: ["3.8", "3.12"]
    
    steps:      
      - name: Setup GNU Fortran
        if: false == contains( matrix.os, 'windows')
        uses: awvwgk/setup-fortran@v1

      - name: Checkout the repository to the GitHub runner
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          update-environment: true
    
      - uses: actions/download-artifact@v4
        with:
          name: cibw-sdist
          # destination path
          path: dist

      - name: Install the sdist
        run: |
          python -m pip install --upgrade pip
          python -m pip install ./dist/*.tar.gz
          python -m pip install pytest

      - name: Run tests
        run: |
          pytest

  # # Built wheels are already tested by cibuildwheel so no need to manually test them again
  # # So commenting out the following job, but can uncomment it if needed to manually test the built wheels
  # # The job was running successfully and all the tests were passing the last time I ran it.
  # manual_test_of_built_wheels:
  #   name: Manual test of CIBW built wheels
  #   needs: [build_wheels]
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [ubuntu-20.04, ubuntu-22.04, macos-11, macos-12, macos-13, macos-14]
  #       python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    
  #   steps:      
  #     - name: Checkout the repository to the GitHub runner
  #       uses: actions/checkout@v4

  #     - name: Set up Python ${{ matrix.python-version }}
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: ${{ matrix.python-version }}
  #         update-environment: true
    
  #     - uses: actions/download-artifact@v4
  #       with:
  #         pattern: cibw-wheels-${{ matrix.os }}-*
  #         # destination path
  #         path: dist
  #         merge-multiple: true

  #     - name: Install the built wheels
  #       run: |
  #         python -m pip install --upgrade pip
  #         echo "Listing files in the root directory"
  #         ls -l
  #         echo "Listing files in dist/"
  #         ls -l dist/
  #         pip install numpy h5py matplotlib 
  #         # Explicit dependency installation above is needed since we are using --no-index below
  #         # which prevents pip from downloading the dependencies from PyPI
  #         python -m pip install --no-index --find-links=./dist/ pyslsqp
  #         python -m pip install pytest

  #     - name: Run tests
  #       run: |
  #         pytest

  # This job uploads the built wheels and source distribution to PyPI.
  # It runs only when a release is published or when a v* tag is pushed.
  upload_pypi:
    name: Upload to PyPI
    needs: [build_wheels, build_sdist, manual_test_of_sdist]
    runs-on: ubuntu-22.04
    environment: testpypi
    # environment: pypi
    permissions:
      id-token: write # IMPORTANT: this permission is mandatory for trusted publishing
    # if: github.event_name == 'release' && github.event.action == 'published'
    # or, alternatively, upload to PyPI on every tag starting with 'v' (remove on: release above to use this)
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/download-artifact@v4
        # unpacks all CIBW artifacts into dist/
        with:
          # A glob pattern to the artifacts that should be downloaded.
          # If unspecified, all artifacts for the run are downloaded.
          pattern: cibw-*
          # destination path
          path: dist
          # If true, the downloaded artifacts will be in the same directory specified by path.
          # If false, the downloaded artifacts will be extracted into individual named directories within the specified path.
          merge-multiple: true

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          #  user: __token__
          #  password: ${{ secrets.pypi_password }}
          # To test: repository-url: https://test.pypi.org/legacy/